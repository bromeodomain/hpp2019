["011333","011333","013555","013555","013555","012222","011444","011666","011466","011116","011111","011111","011111","011111","011111","011111","011111","011111","011111","011111","011111","011111","011111","011111","011111","011111","011111","011111","055555","055555","000000","000000","000000","000222","000000","000444","000000","000000","000000","000000","000000","000000","055555","055555","011111","011111","011111","011222","011111","011111","011111","011111","011111","011111","011111","011111","001111","001111","001111","001111","001111","001111","001111","001111","001111","001111","001111","001111","001111","001111","001111","001111","001111","001111","001111","005555","001111","001111","001111","001111","005555","005555","005555","005555","000333","000333","003555","003555","003555","000000","000444","000666","000466","000066","000000","000000","000000","000000","000666","000666","000666","000666","000666","000666","000666","000666","000666","000666","000666","000666","000666","000666","000000","000000","003666","003666","003666","000000","000000","000000","000000","000000","000000","000000","000000","000000"]

var classifier = ["011333","011333","013555","013555","013555","012222","011444","011666","011466","011116","011111","011111","011111","011111","011111","011111","011111","011111","011111","011111","011111","011111","011111","011111","011111","011111","011111","011111","055555","055555","000000","000000","000000","000222","000000","000444","000000","000000","000000","000000","000000","000000","055555","055555","011111","011111","011111","011222","011111","011111","011111","011111","011111","011111","011111","011111","001111","001111","001111","001111","001111","001111","001111","001111","001111","001111","001111","001111","001111","001111","001111","001111","001111","001111","001111","005555","001111","001111","001111","001111","005555","005555","005555","005555","000333","000333","003555","003555","003555","000000","000444","000666","000466","000066","000000","000000","000000","000000","000666","000666","000666","000666","000666","000666","000666","000666","000666","000666","000666","000666","000666","000666","000000","000000","003666","003666","003666","000000","000000","000000","000000","000000","000000","000000","000000","000000"]
points = "1b1,2c2,3d3,4e4,5f5,2n3".split(',');
var pointPri = [0,0,0,0,0,0];
for(i = 0; i < points.length; i++) {
    a = points[i][0];
    b = points[i][1].charCodeAt(0) - 97;
    c = points[i][2];
    if (a==0 || b==0 || c==0) {
        pointPri[i] = 0;
    }
    else {
      var k = (64)*(a-1) + 14*(b-1) + c - 1;
      console.log(k);
        pointPri[i] = classifier.charAt(k);
        console.log(pointPri[i]);
    }
}
var priority = Math.max(pointPri)
//console.log(priority);



//THE REAL ONES

var classifier = ["011333","011333","013555","013555","013555","012222","011444","011666","011466","011116","011111","011111","011111","011111","011111","011111","011111","011111","011111","011111","011111","011111","011111","011111","011111","011111","011111","011111","055555","055555","000000","000000","000000","000222","000000","000444","000000","000000","000000","000000","000000","000000","055555","055555","011111","011111","011111","011222","011111","011111","011111","011111","011111","011111","011111","011111","001111","001111","001111","001111","001111","001111","001111","001111","001111","001111","001111","001111","001111","001111","001111","001111","001111","001111","001111","005555","001111","001111","001111","001111","005555","005555","005555","005555","000333","000333","003555","003555","003555","000000","000444","000666","000466","000066","000000","000000","000000","000000","000666","000666","000666","000666","000666","000666","000666","000666","000666","000666","000666","000666","000666","000666","000000","000000","003666","003666","003666","000000","000000","000000","000000","000000","000000","000000","000000","000000"]
points = "1b1,2c2,3d3,4e4,5f5,2n3".split(',');
var pointPri = [0,0,0,0,0,0];
for(i = 0; i < points.length; i++) {
    a = points[i][0];
    b = points[i][1].charCodeAt(0) - 97;
    c = points[i][2];
    if (a==0 || b==0 || c==0) {
        pointPri[i] = 0;
    }
    else {

      var k = (81)*(a-1)*(a-1) + 14*(b-1) + c - 1;
      var k2 = 9*(a - 1) + b - 1
      console.log(classifier[k2].charAt(c - 1));
      //  pointPri[i] = classifier[(64)*(a-1)*(a-1) + 14*(b-1)].charAt(c-1);
        //console.log(pointPri[i]);
    }
}
var priority = Math.max(pointPri)
//console.log(priority);